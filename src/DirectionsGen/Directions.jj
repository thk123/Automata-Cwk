options {	STATIC = false;	IGNORE_CASE = true;	DEBUG_PARSER = true;
}PARSER_BEGIN(Directions)	class Directions	{	  static int i =0;		public static void main(String[] args) throws ParseException, UndefinedLocationException, PlaceAlreadyDefinedException		{			Directions parser = new Directions(System.in);			parser.Start();		}	}	class Location	{	  String locationName;	  public Location(String locName)	  {	    locationName = locName;	  }	}	class UndefinedLocationException extends Exception	{			}	class PlaceAlreadyDefinedException extends Exception	{	}	PARSER_END(Directions)void Start() throws UndefinedLocationException, PlaceAlreadyDefinedException :{  java.util.HashMap<String, Location> locations;}{  {   	locations = new java.util.HashMap<String, Location >();  }  (        (PlaceDecleration(locations) | PlaceRelation(locations) ) < LINETERMINATOR >    {    }  )+  < EOF >  }void PlaceDecleration(java.util.HashMap<String, Location > locations) throws PlaceAlreadyDefinedException:{  String placeName;}{  "I see "  placeName = PlaceDefinition()  {    placeName = placeName.toLowerCase();    if(locations.containsKey(placeName))    {		throw new PlaceAlreadyDefinedException();    }    else    {		locations.put(placeName, new Location(placeName));	}  }  (    < LISTSEPERATOR >    placeName = PlaceDefinition()    {      	placeName = placeName.toLowerCase();		locations.put(placeName, new Location(placeName));    }  )*  }void PlaceRelation(java.util.HashMap definedLocations) throws UndefinedLocationException :{  String placeA;  String placeB;}{ // < PLACEDEFINITION > (< WHITESPACE >) "is" (< WHITESPACE >) < DIRECTION > (< WHITESPACE >) "of" (< WHITESPACE >) < PLACEDEFINITION > (< WHITESPACE >)*  //( SingularPlaceRelationStart()) < DIRECTION >  "of" < PLACEDEFINITION >  placeA = PlaceDefinition() (" is " | MultiplePlaceListRelation(definedLocations) " are ") < DIRECTION > " of " placeB = PlaceDefinition() (MultiplePlaceListRelation(definedLocations))?  {   	if(!definedLocations.containsKey(placeA.toLowerCase()) || !definedLocations.containsKey(placeB.toLowerCase()))  	{  	  System.out.println("Location not found");  	  	throw new UndefinedLocationException();  	}  	else  	{  	 	System.out.println("Both locations found"); 	}}  }//Read multiple places and throw an error if any one of them not foundvoid MultiplePlaceListRelation(java.util.HashMap locations) throws UndefinedLocationException :{	String placeName;}{  	(    	< LISTSEPERATOR >    	placeName = PlaceDefinition()    	{			if(!locations.containsKey(placeName.toLowerCase()))			{				throw new UndefinedLocationException();			}    	}  	)+}SKIP:{  "\r" | "\n" | "\r\n"} TOKEN :{  < DIRECTION : "NORTH" | "SOUTH" | "EAST" | "WEST" >}TOKEN :{  < LISTSEPERATOR : ", " | " and " >}String PlaceDefinition() :{  Token t;  String placeName;}{	< PLACESTART >	t = < PLACE >	{	  placeName = t.image;	}	{	  return placeName;	}}TOKEN :{ < PLACESTART : "THE " > }TOKEN :{  < PLACE : "[" (["a" - "z"] | " ")+ "]" | (["a" - "z"])+>}TOKEN :{  < LINETERMINATOR : "." | ";" >}
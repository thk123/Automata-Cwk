options {	STATIC = false;	IGNORE_CASE = true;	DEBUG_PARSER = true;
}PARSER_BEGIN(Directions)	class Directions	{	  static int i =0;		public static void main(String[] args) throws ParseException, UndefinedLocationException		{			Directions parser = new Directions(System.in);			parser.Start();		}	}	class Location	{	  String locationName;	  public Location(String locName)	  {	    locationName = locName;	  }	}	class UndefinedLocationException extends Exception	{			}	PARSER_END(Directions)void Start() throws UndefinedLocationException :{  java.util.HashMap<String, Location> locations;  String newLocation;}{  {   	locations = new java.util.HashMap<String, Location >();   	newLocation = null;  }  (        (newLocation = PlaceDecleration() | PlaceRelation(locations)) < LINETERMINATOR >    {      if(newLocation != null)      {		locations.put(newLocation, new Location(newLocation));	  }    }  )+  < EOF >  }String PlaceDecleration() :{  String placeName;}{  "I see "  placeName = PlaceDefinition()  //(< LISTSEPERATOR > < PLACEDEFINITION >)*  	{  	  System.out.println(placeName); 		 return placeName;	}}void PlaceRelation(java.util.HashMap definedLocations) throws UndefinedLocationException :{  String placeA;  String placeB;}{ // < PLACEDEFINITION > (< WHITESPACE >) "is" (< WHITESPACE >) < DIRECTION > (< WHITESPACE >) "of" (< WHITESPACE >) < PLACEDEFINITION > (< WHITESPACE >)*  //( SingularPlaceRelationStart()) < DIRECTION >  "of" < PLACEDEFINITION >  placeA = PlaceDefinition() " is " < DIRECTION > " of " placeB = PlaceDefinition()  {   	if(!definedLocations.containsKey(placeA) || !definedLocations.containsKey(placeB))  	{  	  System.out.println("Location not found");  	  	throw new UndefinedLocationException();  	}  	else  	{  	 	System.out.println("Both locations found"); 	}}  }void SingularPlaceRelationStart() :{}{ // < PLACEDEFINITION > "is" < DIRECTION >}SKIP:{  "\r" | "\n" | "\r\n"} TOKEN :{  < DIRECTION : "NORTH" | "SOUTH" | "EAST" | "WEST" >}TOKEN :{  < LISTSEPERATOR : "," | "and" >}String PlaceDefinition() :{  Token t;  String placeName;}{	< PLACESTART >	t = < PLACE >	{	  placeName = t.image;	}	{	  return placeName;	}}TOKEN :{ < PLACESTART : "THE " > }TOKEN :{  < PLACE : "[" (["a" - "z"] | " ")+ "]" | (["a" - "z"])+>}TOKEN :{  < LINETERMINATOR : "." | ";" >}